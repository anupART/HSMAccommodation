/*
* import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:table_calendar/table_calendar.dart';
import 'dart:math';

import '../../style/color.dart';
import 'package:accomodation_app/screens/bookingpage/booking_page.dart';

enum BedState { vacant, booked }

class BedDetails {
  final String roomNumber;
  final String employeeName;
  final String department;
  final String startDate;
  String endDate;

  BedDetails({
    required this.roomNumber,
    required this.employeeName,
    required this.department,
    required this.startDate,
    required this.endDate,
  });
}

class HSMAccommodation extends StatefulWidget {
  final int? index;
  const HSMAccommodation({this.index, Key? key}) : super(key: key);

  @override
  _HSMAccommodationState createState() => _HSMAccommodationState();
}

class _HSMAccommodationState extends State<HSMAccommodation> {
  late DateTime selectedDate;
  late DateTime focusedDate;
  Map<DateTime, List<BedState>> bedStatusByDate = {};
  Map<int, BedDetails> bedDetailsByIndex = {};
  String selectedFilter = 'All';

  @override
  void initState() {
    super.initState();
    selectedDate = DateTime.now();
    focusedDate = DateTime.now();
    _initializeBedStatus();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async => false,
      child: GestureDetector(
        onTap: () => FocusScope.of(context).unfocus(),
        child: SafeArea(
          child: Scaffold(
            backgroundColor: Colors.white,
            body: Column(
              children: [
                const SizedBox(height: 8),
                _buildCalendarCard(),
                const SizedBox(height: 10),
                _buildChoiceChips(),
                const SizedBox(height: 5),
                Expanded(child: _buildBedLayout()),
                _buildDateDisplay(),
                _buildLegend(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildCalendarCard() {
    return SizedBox(
      width: MediaQuery.of(context).size.width / 1.05,
      child: Card(
        elevation: 6,
        color: Colors.white,
        child: _buildTableCalendar(),
      ),
    );
  }

  Widget _buildChoiceChips() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          _buildChoiceChip('All'),
          _buildChoiceChip('Female', label: 'Girls'),
          _buildChoiceChip('Male', label: 'Boys'),
        ],
      ),
    );
  }

  Widget _buildChoiceChip(String filter, {String? label}) {
    return Padding(
      padding: const EdgeInsets.only(left: 6, right: 6, top: 5, bottom: 2),
      child: ChoiceChip(
        shape: RoundedRectangleBorder(
          side: BorderSide(
            color: selectedFilter == filter ? Colors.white : Colors.black,
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        elevation: 6,
        backgroundColor: Colors.white,
        label: Text(
          label ?? filter,
          style: GoogleFonts.poppins(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: myPrimaryColor,
          ),
        ),
        selected: selectedFilter == filter,
        onSelected: (selected) {
          setState(() {
            selectedFilter = filter;
          });
        },
        selectedColor: Colors.white,
        labelStyle: TextStyle(
          color: selectedFilter == filter ? Colors.white : Colors.black,
        ),
      ),
    );
  }

  Widget _buildBedLayout() {
    List<BedState> bedStatus = bedStatusByDate[selectedDate] ??
        List.generate(18, (index) => BedState.vacant);
    List<BedState> filteredBedStatus = _getFilteredBedStatus(bedStatus);
    return Column(
      children: [
        const SizedBox(height: 20),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                if (selectedFilter != 'Boys') ...[
                  _buildBedGroupRow(filteredBedStatus, 0, 4, 1, 2),
                  const SizedBox(height: 3),
                ],
                if (selectedFilter != 'Girls') ...[
                  _buildBedGroupRow(filteredBedStatus, 9, 13, 3, 4),
                ],
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBedGroupRow(List<BedState> filteredBedStatus, int startIndex1, int startIndex2, int roomNumber1, int roomNumber2) {
    return Expanded(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(child: _buildBedGroup(filteredBedStatus.sublist(0, 4), startIndex1, roomNumber1)),
          const SizedBox(width: 10),
          Expanded(child: _buildBedGroup(filteredBedStatus.sublist(4, 9), startIndex2, roomNumber2)),
        ],
      ),
    );
  }

  Widget _buildBedGroup(List<BedState> groupBedStatus, int startIndex, int roomNumber) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.5),
            spreadRadius: 0,
            blurRadius: 10,
            offset: const Offset(5, 5),
          ),
          const BoxShadow(
            color: Colors.white,
            spreadRadius: 0,
            blurRadius: 10,
            offset: Offset(-5, -5),
          ),
        ],
        borderRadius: BorderRadius.circular(10),
      ),
      height: MediaQuery.of(context).size.height / 5.3,
      width: MediaQuery.of(context).size.width / 3,
      margin: const EdgeInsets.all(8),
      child: Column(
        children: [
          _buildRoomNumber(roomNumber),
          const SizedBox(height: 8),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  childAspectRatio: 2.7,
                  crossAxisSpacing: 8,
                  mainAxisSpacing: 8,
                ),
                itemCount: groupBedStatus.length,
                itemBuilder: (context, index) {
                  int bedIndex = startIndex + index;
                  return _buildBedTile(bedIndex, groupBedStatus[index]);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBedTile(int bedIndex, BedState bedState) {
    return GestureDetector(
      onTap: () => _showBedDialog(bedIndex, bedState),
      child: Container(
        decoration: BoxDecoration(
          color: _getBedColor(bedState),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Center(
          child: Text(
            'Bed ${bedIndex + 1}',
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.black,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTableCalendar() {
    return TableCalendar(
      startingDayOfWeek: StartingDayOfWeek.monday,
      focusedDay: focusedDate,
      firstDay: DateTime.now().subtract(const Duration(days: 30)),
      lastDay: DateTime.now().add(const Duration(days: 60)),
      calendarFormat: CalendarFormat.week,
      selectedDayPredicate: (day) => isSameDay(selectedDate, day),
      onDaySelected: (selectedDay, focusedDay) {
        setState(() {
          selectedDate = selectedDay;
          focusedDate = focusedDay;
        });
      },
      headerStyle: HeaderStyle(
        titleTextStyle: GoogleFonts.poppins(
          fontSize: 18,
          fontWeight: FontWeight.bold,
          color: myPrimaryColor,
        ),
        formatButtonVisible: false,
        titleCentered: true,
        leftChevronIcon: Icon(Icons.chevron_left, color: myPrimaryColor),
        rightChevronIcon: Icon(Icons.chevron_right, color: myPrimaryColor),
      ),
      calendarStyle: CalendarStyle(
        defaultTextStyle: GoogleFonts.poppins(fontSize: 16, color: Colors.black),
        weekendTextStyle: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.red),
        selectedTextStyle: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
        todayTextStyle: GoogleFonts.poppins(fontSize: 16, color: Colors.white),
        outsideTextStyle: GoogleFonts.poppins(color: Colors.grey.shade400),
        disabledTextStyle: GoogleFonts.poppins(color: Colors.grey.shade600),
        todayDecoration: BoxDecoration(color: Colors.orangeAccent, shape: BoxShape.circle),
        selectedDecoration: BoxDecoration(color: myPrimaryColor, shape: BoxShape.circle),
      ),
      enabledDayPredicate: (day) => true,
    );
  }

  void _showBedDialog(int index, BedState bedState) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          title: Text(
            'Bed ${index + 1}',
            style: GoogleFonts.poppins(
              fontSize: 19,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          content: bedState == BedState.booked
              ? _buildBookedBedContent(index)
              : _buildVacantBedContent(),
          actions: _buildDialogActions(index, bedState),
        );
      },
    );
  }

  Widget _buildBookedBedContent(int index) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Current Booking Details:',
          style: GoogleFonts.poppins(
            fontSize: 17,
            fontWeight: FontWeight.bold,
            color: Colors.black,
          ),
        ),
        const SizedBox(height: 10),
        if (bedDetailsByIndex.containsKey(index)) ...[
          _detailItem('Room Number', bedDetailsByIndex[index]!.roomNumber),
          _detailItem('Employee Name', bedDetailsByIndex[index]!.employeeName),
          _detailItem('Department', bedDetailsByIndex[index]!.department),
          _detailItem('Start Date', bedDetailsByIndex[index]!.startDate),
          _detailItem('End Date', bedDetailsByIndex[index]!.endDate),
        ],
        const SizedBox(height: 10),
        Text(
          'Do you want to extend or vacate this bed?',
          style: GoogleFonts.poppins(
            fontSize: 16,
            color: Colors.black,
          ),
        ),
      ],
    );
  }

  Widget _buildVacantBedContent() {
    return Text(
      'Do you want to book this bed?',
      style: GoogleFonts.poppins(
        fontSize: 16,
        color: Colors.black,
      ),
    );
  }

  List<Widget> _buildDialogActions(int index, BedState bedState) {
    if (bedState == BedState.booked) {
      return [
        _buildDialogButton('Extend', Colors.grey.shade200, () async {
          DateTime? newEndDate = await _selectEndDate(
              context, bedDetailsByIndex[index]!.endDate);
          if (newEndDate != null) {
            _showConfirmationDialog(
                context, index, bedDetailsByIndex[index]!, newEndDate);
          }
        }),
        _buildDialogButton('Vacant', Colors.grey.shade200, () {
          _showVacateConfirmationDialog(context, index);
        }),
        _buildDialogButton('Cancel', Colors.black12, () {
          Navigator.of(context).pop();
        }),
      ];
    } else {
      return [
        _buildDialogButton('Book', Colors.orange.shade100, () async {
          Navigator.of(context).pop();
          dynamic result = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const BookingPage(),
            ),
          );
          if (result != null) {
            _updateBooking(index, result);
          }
        }),
        _buildDialogButton('Cancel', Colors.black12, () {
          Navigator.of(context).pop();
        }),
      ];
    }
  }

  Widget _buildDialogButton(String label, Color color, VoidCallback onPressed) {
    return TextButton(
      style: ButtonStyle(
        backgroundColor: MaterialStateProperty.all(color),
        shape: MaterialStateProperty.all(
          RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      ),
      onPressed: onPressed,
      child: Text(
        label,
        style: GoogleFonts.poppins(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: label == 'Cancel' ? Colors.black : myPrimaryColor,
        ),
      ),
    );
  }

  void _updateBooking(int index, dynamic result) {
    setState(() {
      bedStatusByDate[selectedDate]![index] = BedState.booked;
      bedDetailsByIndex[index] = BedDetails(
        roomNumber: result['roomNumber'],
        employeeName: result['employeeName'],
        department: result['department'],
        startDate: DateFormat('yyyy-MM-dd').format(result['startDate']),
        endDate: DateFormat('yyyy-MM-dd').format(result['endDate']),
      );
    });
  }

  void _showConfirmationDialog(BuildContext context, int index, BedDetails bedDetails, DateTime newEndDate) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          title: Text(
            'Confirm Extension',
            style: GoogleFonts.poppins(
              fontSize: 20,
              color: Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            'Do you want to extend the end date to ${DateFormat('yyyy-MM-dd').format(newEndDate)}?',
            style: GoogleFonts.poppins(
              fontSize: 16,
              color: Colors.black,
            ),
          ),
          actions: [
            _buildConfirmationButton('Yes', () {
              setState(() {
                bedDetails.endDate = DateFormat('yyyy-MM-dd').format(newEndDate);
                bedStatusByDate[selectedDate]![index] = BedState.booked;
              });
              Navigator.of(context).pop();
              Navigator.of(context).pop();
              _showBedDialog(index, BedState.booked);
            }),
            _buildConfirmationButton('No', () {
              Navigator.of(context).pop();
            }),
          ],
        );
      },
    );
  }

  void _showVacateConfirmationDialog(BuildContext context, int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          title: Text(
            'Confirm Vacant',
            style: GoogleFonts.poppins(
              fontSize: 20,
              color: Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            'Are you sure you want to vacate this bed?',
            style: GoogleFonts.poppins(
              fontSize: 16,
              color: Colors.black,
            ),
          ),
          actions: [
            _buildConfirmationButton('Yes', () {
              setState(() {
                bedStatusByDate[selectedDate]![index] = BedState.vacant;
                bedDetailsByIndex.remove(index);
              });
              Navigator.of(context).pop();
              Navigator.of(context).pop();
            }),
            _buildConfirmationButton('No', () {
              Navigator.of(context).pop();
            }),
          ],
        );
      },
    );
  }

  Widget _buildConfirmationButton(String label, VoidCallback onPressed) {
    return TextButton(
      style: ButtonStyle(
        backgroundColor: MaterialStateProperty.all(Colors.black12),
        shape: MaterialStateProperty.all(
          RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      ),
      onPressed: onPressed,
      child: Text(
        label,
        style: GoogleFonts.poppins(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: label == 'Yes' ? bookedColor : Colors.red,
        ),
      ),
    );
  }

  Future<DateTime?>    _selectEndDate(BuildContext context, String currentEndDate) async {
    DateTime initialDate = DateFormat('yyyy-MM-dd').parse(currentEndDate);
    return await showDatePicker(
      builder: (context, Widget? child) {
        return Theme(
          data: Theme.of(context).copyWith(
            datePickerTheme: DatePickerThemeData(
              headerBackgroundColor: Colors.orange.shade400,
              headerForegroundColor: Colors.white,
            ),
            dialogBackgroundColor: myOnSecondaryColor,
            colorScheme: ColorScheme.light(
              primary: myPrimaryColor,
              onPrimary: Colors.white,
              onSurface: Colors.black,
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                textStyle: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                foregroundColor: Colors.black,
              ),
            ),
          ),
          child: child ?? const SizedBox(),
        );
      },
      context: context,
      initialDate: initialDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
  }

  void _initializeBedStatus() {
    DateTime startDate = DateTime.now().subtract(const Duration(days: 365));
    DateTime endDate = DateTime.now().add(const Duration(days: 365));
    for (DateTime date = startDate; date.isBefore(endDate); date = date.add(const Duration(days: 1))) {
      if (!bedStatusByDate.containsKey(date)) {
        bedStatusByDate[date] = List.filled(18, BedState.vacant);
        _generateRandomBookings(date);
      }
    }
  }

  void _generateRandomBookings(DateTime date) {
    final random = Random();
    for (int j = 0; j < 5; j++) {
      int bookedIndex = random.nextInt(18);
      bedStatusByDate[date]![bookedIndex] = BedState.booked;
      bedDetailsByIndex[bookedIndex] = BedDetails(
        roomNumber: 'Room ${bookedIndex + 100}',
        employeeName: 'Employee ${bookedIndex + 1}',
        department: 'Dept ${bookedIndex % 5}',
        startDate: DateFormat('yyyy-MM-dd').format(date.subtract(const Duration(days: 5))),
        endDate: DateFormat('yyyy-MM-dd').format(date.add(const Duration(days: 5))),
      );
    }
  }

  Widget _buildRoomNumber(int roomNumber) {
    return Row(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 8, left: 8, right: 4),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 8),
            decoration: BoxDecoration(
              color: myPrimaryColor,
              borderRadius: BorderRadius.circular(5),
            ),
            child: Text(
              'Room $roomNumber',
              style: GoogleFonts.poppins(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
      ],
    );
  }

  List<BedState> _getFilteredBedStatus(List<BedState> bedStatus) {
    switch (selectedFilter) {
      case 'Girls':
        return bedStatus.sublist(0, 9);
      case 'Boys':
        return bedStatus.sublist(9, 18);
      default:
        return bedStatus;
    }
  }

  Widget _buildDateDisplay() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Text(
        'Selected Date: ${DateFormat('yyyy-MM-dd').format(selectedDate)}',
        style: GoogleFonts.poppins(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: Colors.black,
        ),
      ),
    );
  }

  Widget _buildLegend() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 25, left: 16, right: 16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          _legendItem(bookedColor, 'Booked'),
          const SizedBox(width: 16),
          _legendItem(vacantColor, 'Vacant'),
        ],
      ),
    );
  }

  Widget _legendItem(Color color, String label) {
    return Row(
      children: [
        Container(
          width: 20,
          height: 20,
          color: color,
        ),
        const SizedBox(width: 8),
        Text(
          label,
          style: GoogleFonts.poppins(
            fontSize: 14,
            color: Colors.black,
          ),
        ),
      ],
    );
  }

  Widget _detailItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Text(
            '$label: ',
            style: GoogleFonts.poppins(
              fontSize: 15,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: GoogleFonts.poppins(
                fontSize: 15,
                color: Colors.grey.shade600,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Color _getBedColor(BedState state) {
    switch (state) {
      case BedState.vacant:
        return Colors.orange.shade300;
      case BedState.booked:
        return Colors.green.shade400;
      default:
        return Colors.white;
    }
  }
}
// when click on book in  diakof box it goe sto booikg page that is right but it ,but after clciking on savae bookiing it is giving me  error of

// DartError: TypeError: null: type 'Null' is not a subtype of type 'String'
// dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/errors.dart 296:3  throw_
// dart-sdk/lib/_internal/js_shared/lib/rti.dart 1405:3                         _failedAsCheck
// dart-sdk/lib/_internal/js_shared/lib/rti.dart 1383:3                         _generalAsCheckImplementation
// packages/accomodation_app/screens/homescreen/new_home.dart 420:34            <fn>
// whye the rabge of calneder decree to only currenty , of exrend , firstaoff in extebd iin caledner picker it hsoudl not shoiw me previou date but shoudl sho dates fro current 2 month
*
* */